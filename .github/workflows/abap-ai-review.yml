name: ABAP AI Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  # workflow_dispatch: {}  # ÊâãÂãïÂÆüË°å„Åó„Åü„ÅÑÂ†¥Âêà„ÅØÊúâÂäπÂåñ

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  ENFORCE_LEVEL: block
  OVERRIDE_COMMIT_KEYWORD: "[abap-override]"
  OVERRIDE_LABEL: "abap-override"
  DIFF_MAX_BYTES: "120000"  # ‰ªªÊÑè: diff„Éà„É©„É≥„Ç±„Éº„Éà‰∏äÈôêÔºàÂèØÂ§âÂåñÔºâ

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      # --- ABAPÂ∑ÆÂàÜ„ÅÆÂèéÈõÜÔºàABAPÊã°ÂºµÂ≠ê„Å´ÈôêÂÆöÔºâ ---
      - name: Collect ABAP diff
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin "${{ github.base_ref }}" --depth=50 || true
          git diff --unified=0 "origin/${{ github.base_ref }}...HEAD" \
            -- '*.abap' '*.prog.abap' '*.clas.abap' '*.intf.abap' '*.incl.abap' > diff.patch || true
          head -c "${DIFF_MAX_BYTES}" diff.patch > diff.trunc.patch || true
          wc -c diff.trunc.patch || true

      - name: Skip if no diff
        id: guard
        shell: bash
        run: |
          if [ ! -s diff.trunc.patch ]; then
            echo "No ABAP diff. Skipping review."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Collect PR metadata
        if: steps.guard.outputs.skip != 'true'
        id: meta
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          NUM="${{ github.event.number }}"
          PR=$(gh api "repos/$REPO/pulls/$NUM")
          FILES_JSON=$(gh api "repos/$REPO/pulls/$NUM/files" -q '.[] | {filename, status}' | jq -c -s .)

          {
            echo "title<<__EOF__"
            echo "$PR" | jq -r '.title'
            echo "__EOF__"
            echo "body<<__EOF__"
            echo "$PR" | jq -r '.body // ""' | tr -d '\r'
            echo "__EOF__"
            echo "author<<__EOF__"
            echo "$PR" | jq -r '.user.login'
            echo "__EOF__"
            echo "changed_files<<__EOF__"
            echo "$FILES_JSON"
            echo "__EOF__"
          } >> "$GITHUB_OUTPUT"

      - name: Call Dify Workflow
        if: steps.guard.outputs.skip != 'true'
        id: dify
        env:
          DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
          DIFY_API_BASE: ${{ secrets.DIFY_API_BASE }}
          DIFY_WORKFLOW_ID: ${{ secrets.DIFY_WORKFLOW_ID }}
        shell: bash
        run: |
          set -euo pipefail

          [ -n "${DIFY_API_KEY:-}" ]     || { echo "ERROR: DIFY_API_KEY is empty."; exit 1; }
          [ -n "${DIFY_API_BASE:-}" ]    || { echo "ERROR: DIFY_API_BASE is empty."; exit 1; }
          [ -n "${DIFY_WORKFLOW_ID:-}" ] || { echo "ERROR: DIFY_WORKFLOW_ID is empty."; exit 1; }

          _base="${DIFY_API_BASE%/}"
          if ! echo "$_base" | grep -q '/v1$'; then
            _base="$_base/v1"
          fi
          URL="$_base/workflows/run"

          BODY=$(jq -n \
            --arg wid   "${DIFY_WORKFLOW_ID}" \
            --arg diff  "$(cat diff.trunc.patch)" \
            --arg repo  "${{ github.repository }}" \
            --arg pr    "${{ github.event.number }}" \
            --arg user  "${{ github.actor }}" \
            --arg author "${{ steps.meta.outputs.author }}" \
            --arg title  "${{ steps.meta.outputs.title }}" \
            --arg bodytxt "${{ steps.meta.outputs.body }}" \
            --arg changed_files "${{ steps.meta.outputs.changed_files }}" \
            '{
               workflow_id: $wid,
               inputs: {
                 code_diff: $diff,
                 repo: $repo,
                 pr_number: ($pr|tonumber),
                 author: $author,
                 title: $title,
                 body: $bodytxt,
                 changed_files: $changed_files
               },
               response_mode: "blocking",
               user: $user
             }')

          RESP=$(curl -sS -L -w "\n%{http_code}" \
            -H "Authorization: Bearer $DIFY_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$URL" || true)

          HTTP_CODE=$(echo "$RESP" | tail -n1)
          JSON=$(echo "$RESP" | sed '$d')
          echo "$JSON" > dify.json

          if ! echo "$HTTP_CODE" | grep -qE '^2[0-9][0-9]$'; then
            echo "(Dify error; HTTP_CODE=$HTTP_CODE)" > review_raw.json
            cat dify.json >> review_raw.json
          else
            jq -r '
              if .data? and .data.outputs? and (.data.outputs.review? // empty) then
                .data.outputs.review
              elif .review? then
                .review
              elif .data? and .data.outputs? then
                .data.outputs
              else
                .
              end
            ' dify.json > review_raw.json
          fi

          if jq -e . review_raw.json >/dev/null 2>&1; then
            if jq -e 'type=="string"' review_raw.json >/dev/null 2>&1; then
              if jq -e 'fromjson | . as $x | ($x|type=="object" or $x|type=="array")' review_raw.json >/dev/null 2>&1; then
                jq -r 'fromjson' review_raw.json > _tmp.json && mv _tmp.json review_raw.json
              else
                jq -r '{raw: .}' review_raw.json > _tmp.json && mv _tmp.json review_raw.json
              fi
            fi
          else
            jq -R -s '{raw: .}' review_raw.json > _tmp.json && mv _tmp.json review_raw.json
          fi
          
      - name: Format Dify output to Markdown (single source of truth)
        if: steps.guard.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
      
          cat > _format.jq <<'JQ'
          def ensure_obj($x):
            if ($x|type)=="object" then $x
            elif ($x|type)=="string" then (try ($x|fromjson) catch {"raw":$x})
            else {"raw":($x|tostring)} end;

          def fix_md:
            .
            | gsub("\\\\r\\\\n|\\\\n|\\\\r"; "\n")
            | gsub("\\n"; "\n")
            | gsub("`abap\\n`abap\\n"; "\n```abap\n")
            | gsub("`abap\\n`"; "\n```abap\n")
            | gsub("`\\n`"; "\n```\n")
            | gsub("\\*\\*([^*]+)\\*\\*"; "**\\1**")
            | gsub("\n```\n\n```abap\n"; "\n```abap\n")
            | gsub("\n```\n```"; "\n```")
            | (if test("```abap[^`]*$") then . + "\n```" else . end);

          def sev($s):
            if   $s=="block" then "‚ùå **BLOCK**"
            elif $s=="warn"  then "‚ö†Ô∏è **WARN**"
            else "‚ÑπÔ∏è **INFO**" end;

          def clean_text($text):
            $text | gsub("\\n"; " ") | gsub("\\s+"; " ") | gsub("^\\s+|\\s+$"; "");

          . as $raw_text |
          (ensure_obj($raw_text)) as $r |
          ($r.violations   // []) as $v_raw |
          ($r.improvements // []) as $i_raw |
          ($r.notes        // []) as $n_raw |
          ($r.raw          // null) as $raw_only |
          ($v_raw | if type=="array" then unique_by(.rule_id) else [] end) as $viol |
          ($i_raw | if type=="array" then unique_by([.title,.code]) else [] end) as $impr |
          ($n_raw | if type=="array" then unique else [] end) as $notes |
          if ((($viol|length)+($impr|length)+($notes|length))==0 and ($raw_only!=null)) then
            ( $raw_only | fix_md )
          else
            "## ü§ñ Dify ABAP „É¨„Éì„É•„ÉºÁµêÊûú\n\n" +
            "### üö® ÈÅïÂèç (Violations)\n\n" +
            ( if (($viol|length)>0) then
                "| „É´„Éº„É´ID | ÈáçÂ§ßÂ∫¶ | Â†¥ÊâÄ | ÂÜÖÂÆπ |\n" +
                "|----------|--------|------|------|\n" +
                ( [ $viol[] |
                    "| `" + (.rule_id|tostring) + "` | " +
                    sev(.severity) + " | " +
                    ("`" + (.location // "-") + "`") + " | " +
                    clean_text(.message // "-") + " |"
                  ] | join("\n") ) + "\n"
              else "ÈÅïÂèç„ÅØÊ§úÂá∫„Åï„Çå„Åæ„Åõ„Çì„Åß„Åó„Åü ‚úÖ\n" end ) +
            "\n### üõ†Ô∏è ÊîπÂñÑÊèêÊ°à (Improvements)\n\n" +
            ( if (($impr|length)>0) then
                ( [ $impr[] |
                    "#### " + (.title // "ÊîπÂñÑÊèêÊ°à") + "\n\n" +
                    (.explanation // "Ë©≥Á¥∞ÊÉÖÂ†±„Å™„Åó") + "\n\n" +
                    (if (.code // "") != "" then
                      "```abap\n" + (.code // "") + "\n```\n"
                    else "" end)
                  ] | join("\n") )
              else "ÊîπÂñÑÊèêÊ°à„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì ‚úÖ\n" end ) +
            "\n### üìù ÂÇôËÄÉ (Notes)\n\n" +
            ( if (($notes|length)>0)
              then ($notes | map("- " + .) | join("\n"))
              else "ËøΩÂä†„ÅÆÂÇôËÄÉ„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì\n" end )
          end |
          fix_md
          JQ

          # ÊßãÊñá„ÉÅ„Çß„ÉÉ„ÇØÔºà‰ªªÊÑèÔºâ
          jq -n -f _format.jq '{}' >/dev/null

          # JSON„ÇíMarkdown„Å´Â§âÊèõ
          jq -R -s -f _format.jq review_raw.json > review_temp.md
          
          # ÊîπË°åÊñáÂ≠ó„ÇíÂÆüÈöõ„ÅÆÊîπË°å„Å´Â§âÊèõ„Åó„ÄÅ‰ΩôÂàÜ„Å™ÊîπË°å„ÇíÊï¥ÁêÜ
          sed 's/\\n/\n/g' review_temp.md | \
          sed '/^$/N;/^\n$/d' | \
          sed 's/```$/```\n/' > review.md

          {
            echo "### üìã Rendered Review (preview)"
            echo
            cat review.md
          } >> "$GITHUB_STEP_SUMMARY"


      # --- BlockÈÅïÂèç„Åå„ÅÇ„Çå„Å∞Fail ---
      - name: Fail if block violations exist (with details)
        if: steps.guard.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
          jq '[.violations[]? | select(.severity=="block")]' review_raw.json > _blocks.json 2>/dev/null || echo "[]" > _blocks.json
          BLOCK_COUNT=$(jq 'length' _blocks.json)

          {
            echo "### ‚ùå Block violations ($BLOCK_COUNT)"
            if [ "$BLOCK_COUNT" -gt 0 ]; then
              echo
              echo "| „É´„Éº„É´ID | ÈáçÂ§ßÂ∫¶ | Â†¥ÊâÄ | ÂÜÖÂÆπ |"
              echo "|---|---|---|---|"
              jq -r '.[] | "| \(.rule_id) | \(.severity) | \(.location // "-") | \(.message // "-") |"' _blocks.json
            fi
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "$BLOCK_COUNT" -gt 0 ]; then
            echo "‚ùå Block violations detected: $BLOCK_COUNT"
            exit 1
          fi

      - name: Post PR comment
        if: steps.guard.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          gh api "repos/${{ github.repository }}/issues/${{ github.event.number }}/comments" \
            -f body="$(cat review.md)"

      - name: Check override (label / commit keyword)
        if: steps.guard.outputs.skip != 'true'
        id: override
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          jq '[.violations[]? | select(.severity=="block")]' review_raw.json > _blocks.json 2>/dev/null || echo "[]" > _blocks.json
          BLOCK_COUNT=$(jq 'length' _blocks.json)

          N="${{ github.event.number }}"
          SKIP=false
          if gh pr view "$N" --json labels -q '.labels[].name' | grep -qx "${OVERRIDE_LABEL}"; then
            echo "Override by label: ${OVERRIDE_LABEL}"
            SKIP=true
          fi
          if git log -1 --pretty=%B | grep -q "${OVERRIDE_COMMIT_KEYWORD}"; then
            echo "Override by commit keyword: ${OVERRIDE_COMMIT_KEYWORD}"
            SKIP=true
          fi
          echo "skip_fail=${SKIP}" >> "$GITHUB_OUTPUT"

      - name: Enforce policy level (fail if violations)
        if: steps.guard.outputs.skip != 'true' && steps.override.outputs.skip_fail != 'true'
        shell: bash
        run: |
          set -euo pipefail
          jq '(.violations // [])' review_raw.json > _viol.json 2>/dev/null || echo "[]" > _viol.json

          level="${ENFORCE_LEVEL:-block}"
          case "$level" in
            off)  COUNT=0 ;;
            warn) COUNT=$(jq '[ .[] | select(.severity=="warn" or .severity=="block") ] | length' _viol.json) ;;
            block|*) COUNT=$(jq '[ .[] | select(.severity=="block") ] | length' _viol.json) ;;
          esac

          {
            echo "### Policy enforcement ($level) ‚Äî selected violations: $COUNT"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "$COUNT" -gt 0 ]; then
            echo "‚ùå Violations detected under policy=$level: $COUNT"
            exit 1
          fi
