name: ABAP AI Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  # workflow_dispatch: {}  # 手動実行したい場合は有効化

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  ENFORCE_LEVEL: block
  OVERRIDE_COMMIT_KEYWORD: "[abap-override]"
  OVERRIDE_LABEL: "abap-override"

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      # --- ABAP差分の収集（ABAP拡張子に限定） ---
      - name: Collect ABAP diff
        shell: bash
        run: |
          set -euo pipefail
          git fetch origin "${{ github.base_ref }}" --depth=50
          git diff --unified=0 "origin/${{ github.base_ref }}...HEAD" \
            -- '*.abap' '*.prog.abap' '*.clas.abap' '*.intf.abap' '*.incl.abap' > diff.patch || true
          head -c 90000 diff.patch > diff.trunc.patch || true
          wc -c diff.trunc.patch || true

      # --- 差分が無ければスキップ ---
      - name: Skip if no diff
        id: guard
        shell: bash
        run: |
          if [ ! -s diff.trunc.patch ]; then
            echo "No ABAP diff. Skipping review."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      # --- PRメタ情報の収集 ---
      - name: Collect PR metadata
        if: steps.guard.outputs.skip != 'true'
        id: meta
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          NUM="${{ github.event.number }}"
          PR=$(gh api "repos/$REPO/pulls/$NUM")
          FILES_JSON=$(gh api "repos/$REPO/pulls/$NUM/files" -q '.[] | {filename, status}' | jq -c -s .)

          {
            echo "title<<__EOF__"
            echo "$PR" | jq -r '.title'
            echo "__EOF__"
            echo "body<<__EOF__"
            echo "$PR" | jq -r '.body // ""' | tr -d '\r'
            echo "__EOF__"
            echo "author<<__EOF__"
            echo "$PR" | jq -r '.user.login'
            echo "__EOF__"
            echo "changed_files<<__EOF__"
            echo "$FILES_JSON"
            echo "__EOF__"
          } >> "$GITHUB_OUTPUT"

      # --- Dify Workflow 実行 ---
      - name: Call Dify Workflow
        if: steps.guard.outputs.skip != 'true'
        id: dify
        env:
          DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
          DIFY_API_BASE: ${{ secrets.DIFY_API_BASE }}
          DIFY_WORKFLOW_ID: ${{ secrets.DIFY_WORKFLOW_ID }}
        shell: bash
        run: |
          set -euo pipefail


          sudo apt-get update -y && sudo apt-get install -y jq


          [ -n "${DIFY_WORKFLOW_ID:-}" ] || { echo "ERROR: DIFY_WORKFLOW_ID is empty."; exit 1; }

          _base="${DIFY_API_BASE%/}"
          if ! echo "$_base" | grep -q '/v1$'; then
            _base="$_base/v1"
          fi
          URL="$_base/workflows/run"
          echo "Call URL: $URL"


          # changed_files は“文字列”で渡す（Dify側：段落 32768）

          BODY=$(jq -n \
            --arg wid   "${DIFY_WORKFLOW_ID}" \
            --arg diff  "$(cat diff.trunc.patch)" \
            --arg repo  "${{ github.repository }}" \
            --arg pr    "${{ github.event.number }}" \
            --arg user  "${{ github.actor }}" \
            --arg author "${{ steps.meta.outputs.author }}" \
            --arg title  "${{ steps.meta.outputs.title }}" \
            --arg bodytxt "${{ steps.meta.outputs.body }}" \
            --arg changed_files "${{ steps.meta.outputs.changed_files }}" \
            '{
               workflow_id: $wid,
               inputs: {
                 code_diff: $diff,
                 repo: $repo,
                 pr_number: ($pr|tonumber),
                 author: $author,
                 title: $title,
                 body: $bodytxt,
                 changed_files: $changed_files
               },
               response_mode: "blocking",
               user: $user
             }')


          # 本文とHTTPコードを両取りして自前判定

          RESP=$(curl -sS -L -w "\n%{http_code}" \
            -H "Authorization: Bearer $DIFY_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$URL" || true)

          HTTP_CODE=$(echo "$RESP" | tail -n1)
          JSON=$(echo "$RESP" | sed '$d')
          echo "HTTP_CODE=$HTTP_CODE"
          echo "$JSON" > dify.json


          # 2xx 判定はそのまま取り出し、非2xxはエラーメッセージを格納

          if ! echo "$HTTP_CODE" | grep -qE '^2'; then
            echo "(Dify error; HTTP_CODE=$HTTP_CODE)" > review_raw.json
            cat dify.json >> review_raw.json
          else

            # outputs.review を最優先。なければ outputs 全体。さらにフォールバックで全体。

            jq -r '
              if .data? and .data.outputs? and (.data.outputs.review? // empty) then
                .data.outputs.review
              elif .review? then
                .review
              elif .data? and .data.outputs? then
                .data.outputs
              else
                .
              end
            ' dify.json > review_raw.json
          fi

          # --- ここから堅牢化（JSONでなければ生テキスト貼りに備えてラップ） ---
          # 1) review_raw.json が「JSONとして妥当か」を確認
          if jq -e . review_raw.json >/dev/null 2>&1; then
            # 1-1) JSONではあるが "文字列" だけのときは、JSONとして再パースを試みる
            if jq -e 'type=="string"' review_raw.json >/dev/null 2>&1; then
              # 文字列がさらにJSON文字列ならデコード、ダメなら {raw: "..."} に包む
              if jq -e 'fromjson | . as $x | ($x|type=="object" or $x|type=="array")' review_raw.json >/dev/null 2>&1; then
                jq -r 'fromjson' review_raw.json > _tmp.json && mv _tmp.json review_raw.json
              else
                jq -r '{raw: .}' review_raw.json > _tmp.json && mv _tmp.json review_raw.json
              fi
            fi
          else
            # 2) そもそもJSONではない（プレーン文字列など）→ {raw: "..."} で包む
            jq -R -s '{raw: .}' review_raw.json > _tmp.json && mv _tmp.json review_raw.json
          fi


      # --- 整形して Markdown を作る（重複排除） ---

         # --- 整形して Markdown を作る（重複排除） ---

      - name: Format Dify output to Markdown
        if: steps.guard.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail

          jq -r '
            def ensure_obj($x):
              if $x|type == "object" then $x
              elif $x|type == "string" then (try ($x|fromjson) catch {"raw":$x})
              else {"raw":($x|tostring)} end;
            def sev($s): if $s=="block" then "❌ block"
                          elif $s=="warn" then "⚠️ warn"
                          else ($s // "info") end;


          # review_raw.json は「JSONの場合もあればプレーン文字列の場合もある」ので
          # -R(=raw) -s(=slurp) で"常に文字列として"読み込む → 必要なら fromjson で解釈
          jq -R -s '
            # 受け取った値をオブジェクト化（文字列JSONにも対応）
            def ensure_obj($x):
              if ($x|type) == "object" then $x
              elif ($x|type) == "string" then (try ($x|fromjson) catch {"raw":$x})
              else {"raw":($x|tostring)}
              end;

            # 表示用：重大度の絵文字
            def sev($s):
              if   $s=="block" then "❌ block"
              elif $s=="warn"  then "⚠️ warn"
              else ($s // "info")
              end;

            . as $raw_text
            | (ensure_obj($raw_text)) as $r


            # Difyの返り値が {violations:[...], improvements:[...], notes:[...]} 形式で来る想定
            # それ以外（プレーン文字列）は {"raw": "..."} で入っている
            | ($r.violations  // []) as $v_raw
            | ($r.improvements // []) as $i_raw

            | ($r.notes // []) as $n_raw
            | ($v_raw | unique_by(.rule_id)) as $viol
            | ($i_raw | unique_by([.title, .code])) as $impr
            | ($n_raw | unique) as $notes
            | "### 🤖 Dify ABAP レビュー結果\n"
            + "\n#### 🚨 違反 (Violations)\n"
            + ( if ($viol|length) > 0 then
                  "| ルールID | 重大度 | 場所 | 内容 |\n|----------|--------|------|------|\n"
                  + ( $viol[] | "| " + (.rule_id|tostring) + " | " + sev(.severity) + " | " + (.location // "-") + " | " + (.message // "-") + " |" )
                  | join("\n")
                else "_No violations_\n" end )
            + "\n\n#### 🛠 改善提案 (Improvements)\n"
            + ( if ($impr|length) > 0 then
                  ( $impr[]
                    | "**" + (.title // "Suggestion") + "**\n"
                    + "説明: " + (.explanation // "-") + "\n"
                    + "```abap\n" + (.code // "") + "\n```\n"
                  ) | join("\n")
                else "_No suggestions_\n" end )

            | ($r.notes       // []) as $n_raw
            | ($r.raw         // null) as $raw_only

            # --- 重複排除 ---
            | ($v_raw | (type=="array"    ? unique_by(.rule_id)           : [])) as $viol
            | ($i_raw | (type=="array"    ? unique_by([.title, .code])    : [])) as $impr
            | ($n_raw | (type=="array"    ? unique                        : [])) as $notes

            # --- 出力を作る ---
            | if ($viol|length + $impr|length + $notes|length) == 0 and ($raw_only != null) then
                # 解析不能だった場合はそのまま貼る
                "### 🤖 Dify ABAP レビュー結果\n\n" +
                "_Parser note: 非構造テキストのため生文貼付_\n\n" +
                $raw_only
              else
                "### 🤖 Dify ABAP レビュー結果\n"
                + "\n#### 🚨 違反 (Violations)\n"
                + ( if ($viol|length) > 0 then
                      "| ルールID | 重大度 | 場所 | 内容 |\n"
                      + "|----------|--------|------|------|\n"
                      + ( $viol[]
                          | "| " + (.rule_id|tostring) + " | "
                          + sev(.severity) + " | "
                          + (.location // "-") + " | "
                          + (.message  // "-") + " |"
                        )
                      | join("\n")
                    else
                      "_No violations_"
                  end )
                + "\n\n#### 🛠 改善提案 (Improvements)\n"
                + ( if ($impr|length) > 0 then
                      ( $impr[]
                        | "**" + (.title // "Suggestion") + "**\n"
                        + "説明: " + (.explanation // "-") + "\n"
                        + "```abap\n" + (.code // "") + "\n```\n"
                      )
                      | join("\n")
                    else
                      "_No suggestions_"
                  end )
                + "\n\n#### 📝 備考\n"
                + ( if ($notes|length) > 0
                    then ($notes | map("- " + .) | join("\n"))
                    else "_No notes_"
                  end )
              end
          ' review_raw.json > review.md

       # --- 違反があれば CI を fail にする ---
       
      - name: Fail if block violations exist (with details)
        if: steps.guard.outputs.skip != 'true'

                + ( $viol[] | "| " + (.rule_id|tostring) + " | " + sev(.severity) + " | " + (.location // "-") + " | " + (.message // "-") + " |" )
              else "_No violations_\n" end )
            + "\n\n#### 🛠 改善提案 (Improvements)\n"
            + ( if ($impr|length) > 0 then
                  ( $impr[] | "**" + (.title // "Suggestion") + "**\n説明: " + (.explanation // "-") + "\n```abap\n" + (.code // "") + "\n```\n" )
              else "_No suggestions_\n" end )

            + "\n#### 📝 備考\n"
            + ( if ($notes|length) > 0 then ($notes | map("- " + .) | join("\n")) else "_No notes_" end )
          ' review_raw.json > review.md

      # --- PRにコメント投稿 ---
      - name: Post PR comment
        if: steps.guard.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          gh api "repos/${{ github.repository }}/issues/${{ github.event.number }}/comments" \
            -f body="$(cat review.md)"

      # --- オーバーライド判定（ラベル/コミット） ---
      - name: Check override (label / commit keyword)
        if: steps.guard.outputs.skip != 'true'
        id: override
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          jq '[.violations[]? | select(.severity=="block")]' review_raw.json > _blocks.json 2>/dev/null || echo "[]" > _blocks.json
          BLOCK_COUNT=$(jq 'length' _blocks.json)

          {
            echo "### ❌ Block violations ($BLOCK_COUNT)"
            if [ "$BLOCK_COUNT" -gt 0 ]; then
              echo
              echo "| ルールID | 場所 | 内容 |"
              echo "|---|---|---|"
              jq -r '.[] | "| \(.rule_id) | \(.location // "-") | \(.message // "-") |"' _blocks.json
            fi
          } >> "$GITHUB_STEP_SUMMARY"
          cat "$GITHUB_STEP_SUMMARY"

          N="${{ github.event.number }}"
          SKIP=false
          if gh pr view "$N" --json labels -q '.labels[].name' | grep -qx "${OVERRIDE_LABEL}"; then
            echo "Override by label: ${OVERRIDE_LABEL}"
            SKIP=true
          fi
          if git log -1 --pretty=%B | grep -q "${OVERRIDE_COMMIT_KEYWORD}"; then
            echo "Override by commit keyword: ${OVERRIDE_COMMIT_KEYWORD}"
            SKIP=true
          fi
          echo "skip_fail=${SKIP}" >> "$GITHUB_OUTPUT"

      # --- Policy enforcement ---
      - name: Enforce policy level (fail if violations)
        if: steps.guard.outputs.skip != 'true' && steps.override.outputs.skip_fail != 'true'
        shell: bash
        run: |
          set -euo pipefail
          jq '(.violations // [])' review_raw.json > _viol.json 2>/dev/null || echo "[]" > _viol.json

          level="${ENFORCE_LEVEL:-block}"
          case "$level" in
            off)  COUNT=0 ;;
            warn) COUNT=$(jq '[ .[] | select(.severity=="warn" or .severity=="block") ] | length' _viol.json) ;;
            block|*) COUNT=$(jq '[ .[] | select(.severity=="block") ] | length' _viol.json) ;;
          esac

          {
            echo "### Policy enforcement ($level) — selected violations: $COUNT"
          } >> "$GITHUB_STEP_SUMMARY"
          cat "$GITHUB_STEP_SUMMARY"

          if [ "$COUNT" -gt 0 ]; then
            echo "❌ Violations detected under policy=$level: $COUNT"
            exit 1
          fi
