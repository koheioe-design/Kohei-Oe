name: ABAP AI Review
on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write   # PR„Ç≥„É°„É≥„ÉàÊäïÁ®ø„Å´ÂøÖË¶Å
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Ôºà‰ªªÊÑèÔºâ„Éï„Ç©„Éº„ÇØPR„ÅØSecrets„ÅåÊ∏°„Çâ„Å™„ÅÑ„ÅÆ„Åß„Çπ„Ç≠„ÉÉ„Éó
      - name: Skip on fork PR (no secrets)
        id: fork_guard
        run: |
          if [ "${{ github.event.pull_request.head.repo.fork }}" = "true" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Fork PR detected. Skipping because secrets are not available."
          fi

      - name: Collect ABAP diff
        if: steps.fork_guard.outputs.skip != 'true'
        shell: bash
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1
          # ABAPÊã°ÂºµÂ≠ê„ÅÆ„ÅøÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶ËøΩÂä†Ôºâ
          git diff --unified=0 origin/${{ github.base_ref }}...HEAD \
            -- '*.abap' '*.prog.abap' '*.clas.abap' '*.intf.abap' '*.incl.abap' > diff.patch || true
          # LLM‰∏äÈôêÂØæÁ≠ñ„Åß„Çµ„Ç§„Ç∫Âà∂ÈôêÔºàÂøÖË¶Å„Å´Âøú„Åò„Å¶Ë™øÊï¥Ôºâ
          head -c 90000 diff.patch > diff.trunc.patch || true

      - name: Skip if no diff
        if: steps.fork_guard.outputs.skip != 'true'
        id: guard
        shell: bash
        run: |
          if [ ! -s diff.trunc.patch ]; then
            echo "No ABAP diff. Skipping review."
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      # PR„É°„ÇøÊÉÖÂ†±„ÅÆÂèéÈõÜÔºàtitle / body / author / changed_filesÔºâ
      - name: Collect PR metadata
        if: steps.guard.outputs.skip != 'true' && steps.fork_guard.outputs.skip != 'true'
        id: meta
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          NUM="${{ github.event.number }}"
          PR_JSON=$(gh api repos/$REPO/pulls/$NUM)
          FILES_JSON=$(gh api repos/$REPO/pulls/$NUM/files -q '.[] | {filename, status}' | jq -s .)

          echo "title=$(echo "$PR_JSON" | jq -r '.title')" >> $GITHUB_OUTPUT
          # body„Åånull„ÅÆ„Ç±„Éº„Çπ„Å´ÂÇô„Åà„Å¶Á©∫ÊñáÂ≠ó„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ
          echo "body=$(echo "$PR_JSON" | jq -r '.body // ""' | tr -d '\r' )" >> $GITHUB_OUTPUT
          echo "author=$(echo "$PR_JSON" | jq -r '.user.login')" >> $GITHUB_OUTPUT
          # JSONÊñáÂ≠óÂàó„Çí„Åù„ÅÆ„Åæ„ÅæÊ∏°„Åõ„Çã„Çà„ÅÜbase64„Ç®„É≥„Ç≥„Éº„Éâ„Åó„Å¶„Åä„Åè
          echo "changed_files_b64=$(echo "$FILES_JSON" | base64 -w0)" >> $GITHUB_OUTPUT

      - name: Call Dify Workflow
        if: steps.guard.outputs.skip != 'true' && steps.fork_guard.outputs.skip != 'true'
        id: dify
        env:
          DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
          DIFY_API_BASE: ${{ secrets.DIFY_API_BASE }}   # ‰æã: https://api.dify.ai/v1 „ÇÇ„Åó„Åè„ÅØ Self-host
        run: |
          set -e
          sudo apt-get update -y && sudo apt-get install -y jq
          DIFF="$(cat diff.trunc.patch)"
          CHANGED_FILES_JSON="$(echo "${{ steps.meta.outputs.changed_files_b64 }}" | base64 -d)"
          BODY=$(jq -n \
            --arg diff   "$DIFF" \
            --arg repo   "${{ github.repository }}" \
            --arg pr     "${{ github.event.number }}" \
            --arg user   "${{ steps.meta.outputs.author }}" \
            --arg title  "${{ steps.meta.outputs.title }}" \
            --arg body   "${{ steps.meta.outputs.body }}" \
            --argjson changed_files "$CHANGED_FILES_JSON" \
            '{
               inputs: {
                 code_diff: $diff,
                 repo: $repo,
                 pr_number: ($pr|tonumber),
                 author: $user,
                 title: $title,
                 body: $body,
                 changed_files: $changed_files
               },
               response_mode: "blocking",
               user: $user
             }')

          # ‰æã: $DIFY_API_BASE/workflows/<WORKFLOW_ID>/run „Åæ„Åü„ÅØ /workflows/run „ÅÆ„Å©„Å°„Çâ„Åã
          # „ÅÇ„Å™„Åü„ÅÆÁí∞Â¢É„Å´Âêà„Çè„Åõ„Å¶Êú´Â∞æ„ÇíË™øÊï¥„Åó„Å¶„Åè„Å†„Åï„ÅÑ
          RESP=$(curl -sS -w "\n%{http_code}" -H "Authorization: Bearer $DIFY_API_KEY" \
               -H "Content-Type: application/json" \
               -d "$BODY" \
               "$DIFY_API_BASE/workflows/run")

          HTTP_CODE=$(echo "$RESP" | tail -n1)
          JSON=$(echo "$RESP" | sed '$d')
          echo "$JSON" > dify.json
          echo "http_code=$HTTP_CODE"
          jq -r '.' dify.json || true

          # ÊúüÂæÖ„Ç≠„Éº„ÇíÂ∫É„ÇÅ„Å´Êé¢Á¥¢„Åó„Å¶Âá∫Âäõ„ÇíÊãæ„ÅÜ
          REVIEW=$(
            jq -r '
              .data.outputs.result
              // .data.outputs.review
              // .data.outputs.output
              // .data.outputs.text
              // .data.result
              // .result
              // .message
              // empty
            ' dify.json
          )
          if [ -z "$REVIEW" ]; then
            REVIEW="„É¨„Éì„É•„ÉºÁµêÊûú„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇraw: ${JSON}"
          fi

          # ÂæåÁ∂ö„Å∏ÂÆâÂÖ®„Å´Âèó„ÅëÊ∏°„Åó
          echo "REVIEW_B64=$(printf "%s" "$REVIEW" | base64 -w0)" >> $GITHUB_OUTPUT

      - name: Post PR comment
        if: steps.guard.outputs.skip != 'true' && steps.fork_guard.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REVIEW="$(echo "${{ steps.dify.outputs.REVIEW_B64 }}" | base64 -d)"
          # „Åù„ÅÆ„Åæ„ÅæË≤º„Çã„Å®Èï∑Â§ß„Å´„Å™„Çä„Åå„Å°„Å™„ÅÆ„ÅßË¶ãÂá∫„Åó„Å®„Ç≥„Éº„Éâ„Éñ„É≠„ÉÉ„ÇØ„ÅßÊï¥ÂΩ¢
          {
            echo "### ü§ñ Dify Ë¶èÁ¥Ñ„É¨„Éì„É•„Éº"
            echo
            echo "\`\`\`"
            echo "$REVIEW"
            echo "\`\`\`"
          } > review.md

          gh api repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
            -f body="$(cat review.md)"
