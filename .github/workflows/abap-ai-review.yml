name: ABAP AI Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  # 手動テストしたい場合は下を有効化
  # workflow_dispatch: {}

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- ABAP差分の収集（ABAP拡張子に限定） ---
      - name: Collect ABAP diff
        shell: bash
        run: |
          git fetch origin ${{ github.base_ref }} --depth=1
          git diff --unified=0 origin/${{ github.base_ref }}...HEAD \
            -- '*.abap' '*.prog.abap' '*.clas.abap' '*.intf.abap' '*.incl.abap' > diff.patch || true
          # LLM入力量の上限対策（必要に応じて調整）
          head -c 90000 diff.patch > diff.trunc.patch || true
          wc -c diff.trunc.patch || true

      # --- 差分が無ければスキップ ---
      - name: Skip if no diff
        id: guard
        shell: bash
        run: |
          if [ ! -s diff.trunc.patch ]; then
            echo "No ABAP diff. Skipping review."
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      # --- PRメタ情報の収集（author/title/body/changed_files） ---
      - name: Collect PR metadata
        if: steps.guard.outputs.skip != 'true'
        id: meta
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          NUM="${{ github.event.number }}"
          PR=$(gh api repos/$REPO/pulls/$NUM)
          FILES_JSON=$(gh api repos/$REPO/pulls/$NUM/files -q '.[] | {filename, status}' | jq -c -s .)

          echo "title=$(echo "$PR" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "body=$(echo "$PR" | jq -r '.body // ""' | tr -d '\r')" >> $GITHUB_OUTPUT
          echo "author=$(echo "$PR" | jq -r '.user.login')" >> $GITHUB_OUTPUT
          # 文字列として渡したいのでJSONをそのまま文字列で保持
          echo "changed_files=$FILES_JSON" >> $GITHUB_OUTPUT

      # --- Dify Workflow 実行 ---
      - name: Call Dify Workflow
        if: steps.guard.outputs.skip != 'true'
        id: dify
        env:
          DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
          DIFY_API_BASE: ${{ secrets.DIFY_API_BASE }}       # https://dify-novagrid.com/v1
          DIFY_WORKFLOW_ID: ${{ secrets.DIFY_WORKFLOW_ID }} # 例: uNCqCaZfykMRl1r6
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq

          # --- 事前チェック＆URL整形 ---
          if [ -z "${DIFY_WORKFLOW_ID:-}" ]; then
            echo "ERROR: DIFY_WORKFLOW_ID is empty. Set repository secret."
            exit 1
          fi
          API_BASE="${DIFY_API_BASE%/}"
          URL="$API_BASE/workflows/run"
          echo "Call URL: $URL"

          # --- リクエストBODY作成（workflow_id をボディに入れる） ---
          BODY=$(jq -n \
            --arg wid  "${DIFY_WORKFLOW_ID}" \
            --arg diff "$(cat diff.trunc.patch)" \
            --arg repo "${{ github.repository }}" \
            --arg pr   "${{ github.event.number }}" \
            --arg user "${{ github.actor }}" \
            --arg author "${{ steps.meta.outputs.author }}" \
            --arg title  "${{ steps.meta.outputs.title }}" \
            --arg body   "${{ steps.meta.outputs.body }}" \
            --arg changed_files "${{ steps.meta.outputs.changed_files }}" \
            '{
              workflow_id: $wid,
              inputs: {
                code_diff: $diff,
                repo: $repo,
                pr_number: ($pr|tonumber),
                author: $author,
                title: $title,
                body: $body,
                changed_files: $changed_files
              },
              response_mode: "blocking",
              user: $user
            }')

          # --- 呼び出し（リダイレクト/失敗検知つき） ---
          RESP=$(curl -sS -fSL -w "\n%{http_code}" \
            -H "Authorization: Bearer $DIFY_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$URL")

          HTTP_CODE=$(echo "$RESP" | tail -n1)
          JSON=$(echo "$RESP" | sed '$d')
          echo "HTTP_CODE=$HTTP_CODE"
          echo "$JSON" > dify.json

          echo "==== DIFY RAW ===="; cat dify.json; echo "=================="

          # LLM出力を拾ってファイル化（review/textどちらでも）
          jq -r '.data.outputs.review // .data.outputs.text // empty' dify.json > review.md
          if [ ! -s review.md ]; then
            echo "(empty)" > review.md
            cat dify.json >> review.md
          fi



          # --- PRにコメント投稿 ---
          - name: Post PR comment
            if: steps.guard.outputs.skip != 'true'
            env:
              GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            run: |
              {
                echo "### 🤖 Dify 規約レビュー"
                echo
                echo '```json'
                cat review.md
                echo '```'
              } > comment.md
        
              gh api repos/${{ github.repository }}/issues/${{ github.event.number }}/comments \
                -f body="$(cat comment.md)"
