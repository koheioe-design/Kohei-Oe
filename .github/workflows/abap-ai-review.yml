name: ABAP AI Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  # workflow_dispatch: {}  # 手動実行したい場合は有効化

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  ENFORCE_LEVEL: block
  OVERRIDE_COMMIT_KEYWORD: "[abap-override]"
  OVERRIDE_LABEL: "abap-override"
  DIFF_MAX_BYTES: "120000"  # 任意: diffトランケート上限（可変化）

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup jq
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

      # --- ABAP差分の収集（ABAP拡張子に限定） ---
      - name: Collect ABAP diff
        shell: bash
        run: |
          set -euo pipefail
          # baseを確実に取得（失敗時は無視して続行）
          git fetch origin "${{ github.base_ref }}" --depth=50 || true

          # 3点ドットでマージベース基準の差分
          git diff --unified=0 "origin/${{ github.base_ref }}...HEAD" \
            -- '*.abap' '*.prog.abap' '*.clas.abap' '*.intf.abap' '*.incl.abap' > diff.patch || true

          # 可変上限でトランケート
          head -c "${DIFF_MAX_BYTES}" diff.patch > diff.trunc.patch || true
          wc -c diff.trunc.patch || true

      # --- 差分が無ければスキップ ---
      - name: Skip if no diff
        id: guard
        shell: bash
        run: |
          if [ ! -s diff.trunc.patch ]; then
            echo "No ABAP diff. Skipping review."
            echo "skip=true" >> "$GITHUB_OUTPUT"
          fi

      # --- PRメタ情報の収集 ---
      - name: Collect PR metadata
        if: steps.guard.outputs.skip != 'true'
        id: meta
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          REPO="${{ github.repository }}"
          NUM="${{ github.event.number }}"
          PR=$(gh api "repos/$REPO/pulls/$NUM")
          FILES_JSON=$(gh api "repos/$REPO/pulls/$NUM/files" -q '.[] | {filename, status}' | jq -c -s .)

          {
            echo "title<<__EOF__"
            echo "$PR" | jq -r '.title'
            echo "__EOF__"
            echo "body<<__EOF__"
            echo "$PR" | jq -r '.body // ""' | tr -d '\r'
            echo "__EOF__"
            echo "author<<__EOF__"
            echo "$PR" | jq -r '.user.login'
            echo "__EOF__"
            echo "changed_files<<__EOF__"
            echo "$FILES_JSON"
            echo "__EOF__"
          } >> "$GITHUB_OUTPUT"

      # --- Dify Workflow 実行 ---
      - name: Call Dify Workflow
        if: steps.guard.outputs.skip != 'true'
        id: dify
        env:
          DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}
          DIFY_API_BASE: ${{ secrets.DIFY_API_BASE }}
          DIFY_WORKFLOW_ID: ${{ secrets.DIFY_WORKFLOW_ID }}
        shell: bash
        run: |
          set -euo pipefail

          # 必須シークレットの存在チェック
          [ -n "${DIFY_API_KEY:-}" ]     || { echo "ERROR: DIFY_API_KEY is empty."; exit 1; }
          [ -n "${DIFY_API_BASE:-}" ]    || { echo "ERROR: DIFY_API_BASE is empty."; exit 1; }
          [ -n "${DIFY_WORKFLOW_ID:-}" ] || { echo "ERROR: DIFY_WORKFLOW_ID is empty."; exit 1; }

          _base="${DIFY_API_BASE%/}"
          if ! echo "$_base" | grep -q '/v1$'; then
            _base="$_base/v1"
          fi
          URL="$_base/workflows/run"
          echo "Call URL: $URL"

          BODY=$(jq -n \
            --arg wid   "${DIFY_WORKFLOW_ID}" \
            --arg diff  "$(cat diff.trunc.patch)" \
            --arg repo  "${{ github.repository }}" \
            --arg pr    "${{ github.event.number }}" \
            --arg user  "${{ github.actor }}" \
            --arg author "${{ steps.meta.outputs.author }}" \
            --arg title  "${{ steps.meta.outputs.title }}" \
            --arg bodytxt "${{ steps.meta.outputs.body }}" \
            --arg changed_files "${{ steps.meta.outputs.changed_files }}" \
            '{
               workflow_id: $wid,
               inputs: {
                 code_diff: $diff,
                 repo: $repo,
                 pr_number: ($pr|tonumber),
                 author: $author,
                 title: $title,
                 body: $bodytxt,
                 changed_files: $changed_files
               },
               response_mode: "blocking",
               user: $user
             }')

          RESP=$(curl -sS -L -w "\n%{http_code}" \
            -H "Authorization: Bearer $DIFY_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$URL" || true)

          HTTP_CODE=$(echo "$RESP" | tail -n1)
          JSON=$(echo "$RESP" | sed '$d')
          echo "HTTP_CODE=$HTTP_CODE"
          echo "$JSON" > dify.json

          if ! echo "$HTTP_CODE" | grep -qE '^2[0-9][0-9]$'; then
            # 非2xx: プレーン連結（後段でRモードslurp→{raw:..}包み）
            echo "(Dify error; HTTP_CODE=$HTTP_CODE)" > review_raw.json
            cat dify.json >> review_raw.json
          else
            # 正常: reviewフィールド優先
            jq -r '
              if .data? and .data.outputs? and (.data.outputs.review? // empty) then
                .data.outputs.review
              elif .review? then
                .review
              elif .data? and .data.outputs? then
                .data.outputs
              else
                .
              end
            ' dify.json > review_raw.json
          fi

          # JSON検証とラッピング（文字列や非JSONに対応）
          if jq -e . review_raw.json >/dev/null 2>&1; then
            if jq -e 'type=="string"' review_raw.json >/dev/null 2>&1; then
              if jq -e 'fromjson | . as $x | ($x|type=="object" or $x|type=="array")' review_raw.json >/dev/null 2>&1; then
                jq -r 'fromjson' review_raw.json > _tmp.json && mv _tmp.json review_raw.json
              else
                jq -r '{raw: .}' review_raw.json > _tmp.json && mv _tmp.json review_raw.json
              fi
            fi
          else
            jq -R -s '{raw: .}' review_raw.json > _tmp.json && mv _tmp.json review_raw.json
          fi

      - name: Format Dify output to Markdown (single source of truth)
        if: steps.guard.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail

          cat > _format.jq <<'JQ'
          def ensure_obj($x):
            if ($x|type)=="object" then $x
            elif ($x|type)=="string" then (try ($x|fromjson) catch {"raw":$x})
            else {"raw":($x|tostring)} end;

          def sev($s):
            if   $s=="block" then "❌ block"
            elif $s=="warn"  then "⚠️ warn"
            else ($s // "info") end;

          . as $raw_text
          | (ensure_obj($raw_text)) as $r
          | ($r.violations   // []) as $v_raw
          | ($r.improvements // []) as $i_raw
          | ($r.notes        // []) as $n_raw
          | ($r.raw          // null) as $raw_only
          | ($v_raw | if type=="array" then unique_by(.rule_id) else [] end)        as $viol
          | ($i_raw | if type=="array" then unique_by([.title,.code]) else [] end)  as $impr
          | ($n_raw | if type=="array" then unique else [] end)                      as $notes
          | if ((($viol|length)+($impr|length)+($notes|length))==0 and ($raw_only!=null)) then
              ( $raw_only | gsub("\\r"; "") | gsub("\\n"; "\n") )
              | gsub("\r"; "")
              | gsub("\nabap\nabap\n"; "\n```abap\n")
              | gsub("\nabap\n"; "\n```abap\n")
              | gsub("\n\n\n"; "\n```\n\n")
              | (if test("(?s).*```abap(?!.*```)$") then . + "\n```\n" else . end)
            else
              "### 🤖 Dify ABAP レビュー結果\n"
              + "\n#### 🚨 違反 (Violations)\n"
              + ( if (($viol|length)>0) then
                    "| ルールID | 重大度 | 場所 | 内容 |\n"
                    + "|----------|--------|------|------|\n"
                    + ( [ $viol[]
                        | "| " + (.rule_id|tostring) + " | "
                        + sev(.severity) + " | "
                        + (.location // "-") + " | "
                        + (.message  // "-") + " |"
                      ] | join("\n") )
                  else "_No violations_" end )
              + "\n\n#### 🛠 改善提案 (Improvements)\n"
              + ( if (($impr|length)>0) then
                    ( [ $impr[]
                        | "**" + (.title // "Suggestion") + "**\n"
                        + "説明: " + (.explanation // "-") + "\n"
                        + "```abap\n" + (.code // "") + "\n```\n"
                      ] | join("\n") )
                  else "_No suggestions_" end )
              + "\n\n#### 📝 備考\n"
              + ( if (($notes|length)>0)
                  then ($notes | map("- " + .) | join("\n"))
                  else "_No notes_" end )
            end
          JQ

          jq -R -s -f _format.jq review_raw.json > review.md

          {
            echo "### Rendered Review (preview)"
            echo
            cat review.md
          } >> "$GITHUB_STEP_SUMMARY"

      # --- Block違反があればFail（詳細付き） ---
      - name: Fail if block violations exist (with details)
        if: steps.guard.outputs.skip != 'true'
        shell: bash
        run: |
          set -euo pipefail
          jq '[.violations[]? | select(.severity=="block")]' review_raw.json > _blocks.json 2>/dev/null || echo "[]" > _blocks.json
          BLOCK_COUNT=$(jq 'length' _blocks.json)

          {
            echo "### ❌ Block violations ($BLOCK_COUNT)"
            if [ "$BLOCK_COUNT" -gt 0 ]; then
              echo
              echo "| ルールID | 重大度 | 場所 | 内容 |"
              echo "|---|---|---|---|"
              jq -r '.[] | "| \(.rule_id) | \(.severity) | \(.location // "-") | \(.message // "-") |"' _blocks.json
            fi
          } >> "$GITHUB_STEP_SUMMARY"

          echo "---- blocks detail (json) ----"
          jq . _blocks.json || true
          echo "------------------------------"

          if [ "$BLOCK_COUNT" -gt 0 ]; then
            echo "❌ Block violations detected: $BLOCK_COUNT"
            exit 1
          fi

      # --- PRにコメント投稿 ---
      - name: Post PR comment
        if: steps.guard.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          gh api "repos/${{ github.repository }}/issues/${{ github.event.number }}/comments" \
            -f body="$(cat review.md)"

      # --- オーバーライド判定（ラベル/コミット） ---
      - name: Check override (label / commit keyword)
        if: steps.guard.outputs.skip != 'true'
        id: override
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          jq '[.violations[]? | select(.severity=="block")]' review_raw.json > _blocks.json 2>/dev/null || echo "[]" > _blocks.json
          BLOCK_COUNT=$(jq 'length' _blocks.json)

          N="${{ github.event.number }}"
          SKIP=false
          if gh pr view "$N" --json labels -q '.labels[].name' | grep -qx "${OVERRIDE_LABEL}"; then
            echo "Override by label: ${OVERRIDE_LABEL}"
            SKIP=true
          fi
          if git log -1 --pretty=%B | grep -q "${OVERRIDE_COMMIT_KEYWORD}"; then
            echo "Override by commit keyword: ${OVERRIDE_COMMIT_KEYWORD}"
            SKIP=true
          fi
          echo "skip_fail=${SKIP}" >> "$GITHUB_OUTPUT"

      # --- Policy enforcement ---
      - name: Enforce policy level (fail if violations)
        if: steps.guard.outputs.skip != 'true' && steps.override.outputs.skip_fail != 'true'
        shell: bash
        run: |
          set -euo pipefail
          jq '(.violations // [])' review_raw.json > _viol.json 2>/dev/null || echo "[]" > _viol.json

          level="${ENFORCE_LEVEL:-block}"
          case "$level" in
            off)  COUNT=0 ;;
            warn) COUNT=$(jq '[ .[] | select(.severity=="warn" or .severity=="block") ] | length' _viol.json) ;;
            block|*) COUNT=$(jq '[ .[] | select(.severity=="block") ] | length' _viol.json) ;;
          esac

          {
            echo "### Policy enforcement ($level) — selected violations: $COUNT"
          } >> "$GITHUB_STEP_SUMMARY"

          if [ "$COUNT" -gt 0 ]; then
            echo "❌ Violations detected under policy=$level: $COUNT"
            exit 1
          fi
