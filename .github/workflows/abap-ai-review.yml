# temporary commit for rerun
name: ABAP AI Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  # 手動テストしたい場合は下を有効化
  # workflow_dispatch: {}

permissions:
  contents: read
  pull-requests: write
  issues: write   # コメント投稿で issues API を使うため

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- ABAP差分の収集（ABAP拡張子に限定） ---
      - name: Collect ABAP diff
        shell: bash
        run: |
          # base も履歴を十分取っておく（merge-base計算の安定化）
          git fetch origin "${{ github.base_ref }}" --depth=50
          git diff --unified=0 "origin/${{ github.base_ref }}...HEAD" \
            -- '*.abap' '*.prog.abap' '*.clas.abap' '*.intf.abap' '*.incl.abap' > diff.patch || true
          head -c 90000 diff.patch > diff.trunc.patch || true
          wc -c diff.trunc.patch || true



      # --- 差分が無ければスキップ ---
      - name: Skip if no diff
        id: guard
        shell: bash
        run: |
          if [ ! -s diff.trunc.patch ]; then
            echo "No ABAP diff. Skipping review."
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      # --- PRメタ情報の収集（author/title/body/changed_files） ---
      - name: Collect PR metadata
        if: steps.guard.outputs.skip != 'true'
        id: meta
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          NUM="${{ github.event.number }}"
          PR=$(gh api "repos/$REPO/pulls/$NUM")
          FILES_JSON=$(gh api "repos/$REPO/pulls/$NUM/files" -q '.[] | {filename, status}' | jq -c -s .)
      
          {
            echo "title<<__EOF__"
            echo "$PR" | jq -r '.title'
            echo "__EOF__"
            echo "body<<__EOF__"
            # \r 除去＋そのまま複数行で安全に出力
            echo "$PR" | jq -r '.body // ""' | tr -d '\r'
            echo "__EOF__"
            echo "author<<__EOF__"
            echo "$PR" | jq -r '.user.login'
            echo "__EOF__"
            echo "changed_files<<__EOF__"
            echo "$FILES_JSON"
            echo "__EOF__"
          } >> "$GITHUB_OUTPUT"

  
      # --- Dify Workflow 実行 ---
      - name: Call Dify Workflow
        if: steps.guard.outputs.skip != 'true'
        id: dify
        env:
          DIFY_API_KEY: ${{ secrets.DIFY_API_KEY }}         # Workflow用 Server-side API Key
          DIFY_API_BASE: ${{ secrets.DIFY_API_BASE }}       # 例: https://dify-novagrid.com でも可
          DIFY_WORKFLOW_ID: ${{ secrets.DIFY_WORKFLOW_ID }} # 例: uNCqCaZfykMRl1r6
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y && sudo apt-get install -y jq
      
          if [ -z "${DIFY_WORKFLOW_ID:-}" ]; then
            echo "ERROR: DIFY_WORKFLOW_ID is empty. Set repository secret."
            exit 1
          fi
      
          # --- BASE URL 正規化：末尾スラッシュ削除 + /v1 付与 ---
          _base="${DIFY_API_BASE%/}"
          if ! echo "$_base" | grep -q '/v1$'; then
            _base="$_base/v1"
          fi
          URL="$_base/workflows/run"
          echo "Call URL: $URL"
      
          BODY=$(jq -n \
            --arg wid  "${DIFY_WORKFLOW_ID}" \
            --arg diff "$(cat diff.trunc.patch)" \
            --arg repo "${{ github.repository }}" \
            --arg pr   "${{ github.event.number }}" \
            --arg user "${{ github.actor }}" \
            --arg author "${{ steps.meta.outputs.author }}" \
            --arg title  "${{ steps.meta.outputs.title }}" \
            --arg body   "${{ steps.meta.outputs.body }}" \
            --arg changed_files "${{ steps.meta.outputs.changed_files }}" \
            '{
               workflow_id: $wid,
               inputs: {
                 code_diff: $diff,
                 repo: $repo,
                 pr_number: ($pr|tonumber),
                 author: $author,
                 title: $title,
                 body: $body,
                 changed_files: $changed_files
               },
               response_mode: "blocking",
               user: $user
             }')
      
          # -f を付けない。本文とHTTPコードを両取りして自前で判定
          RESP=$(curl -sS -L -w "\n%{http_code}" \
            -H "Authorization: Bearer $DIFY_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$URL" || true)
      
          HTTP_CODE=$(echo "$RESP" | tail -n1)
          JSON=$(echo "$RESP" | sed '$d')
          echo "HTTP_CODE=$HTTP_CODE"
          echo "$JSON" > dify.json
      
          echo "==== DIFY RAW ===="
          cat dify.json || true
          echo "=================="
      
          # 2xx 以外はログを出しつつ review.md を生成して後段で読めるようにする
          if ! echo "$HTTP_CODE" | grep -qE '^2'; then
            echo "(Dify error; HTTP_CODE=$HTTP_CODE)" > review.md
            cat dify.json >> review.md
          else
            jq -r '.data.outputs.review // .data.outputs.text // empty' dify.json > review.md
            if [ ! -s review.md ]; then
              echo "(empty)" > review.md
              cat dify.json >> review.md
            fi
          fi

     
     


      # …
      - name: Post PR comment
        if: steps.guard.outputs.skip != 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          {
            echo "### 🤖 Dify 規約レビュー"
            echo
            echo '```'
            cat review.md
            echo '```'
          } > comment.md
      
          gh api "repos/${{ github.repository }}/issues/${{ github.event.number }}/comments" \
            -f body="$(cat comment.md)"
